"""
Django settings for inventory_backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tz6gor4ds*7i&ut1(^6^#2$b_mt6z4^u(%kdi+w3uwn=!h!yz_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_spectacular',
    
    # Custom apps
    'products',
    'suppliers',
    'transactions',
    'users',
    'inventory_logs',
    'ai_assistant',
]
SPECTACULAR_SETTINGS = {
    'TITLE': 'Storer Inventory API',
    'DESCRIPTION': 'API for managing products, suppliers, transactions, and inventory, with an AI assistant.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}
dotenv_path = BASE_DIR / '.env' # Assumes .env is in inventory_backend\
if dotenv_path.exists():
    load_dotenv(dotenv_path=dotenv_path)
else:
    # Optionally print a warning if .env is missing, especially for required keys like OPENAI_API_KEY
    print(f"Warning: .env file not found at {dotenv_path}. Environment variables may not be loaded.")
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    
]
CORS_ORIGIN_ALLOW_ALL = True
ROOT_URLCONF = 'inventory_backend.urls'
OPENAI_CHAT_MODEL = 'gpt-4o-mini'
OPENAPI_SCHEMA_FILENAME = 'schema.yaml'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inventory_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

from decouple import config

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME', default='keshav'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='3308'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # --- DEFINE FORMATTERS FIRST ---
    'formatters': {
        'verbose': {
            # Example format: LEVELNAME TIMESTAMP MODULE PROCESS_ID THREAD_ID MESSAGE
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            # Example format: LEVELNAME MESSAGE
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    # --- END FORMATTERS ---

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            # --- Assign a formatter to the console handler ---
            'formatter': 'simple', # Use the 'simple' formatter defined above
        },
    },
    'loggers': {
        # Django's default logger - good to keep usually
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), # Configurable level
            'propagate': False, # Prevent django logs from going to root logger if not needed
        },
        'products.views': { # Logger for your products.views module
            'handlers': ['console'], # Sends to console via 'simple' formatter
            'level': 'INFO',
            'propagate': True, # Allows messages to potentially go to other handlers if needed
        },
        'products.forecast': { # Logger for your products.forecast module
            'handlers': ['console'], # Sends to console via 'simple' formatter
            'level': 'INFO',
            'propagate': True,
        },
        'ai_assistant': { # Your specific logger
            'handlers': ['console'], # Sends to console (simple) and file (verbose)
            'level': 'DEBUG', # Captures DEBUG level and above for this logger
            'propagate': False, # Prevent ai_assistant logs propagating further up
        },
        # Optional: Define a root logger to catch anything not explicitly handled
        # '': { # Root logger
        #     'handlers': ['console'],
        #     'level': 'WARNING', # Catch WARNING and above from libraries etc.
        # },
    },
}
